#!/usr/bin/env node

var eso = require('./lib/eso');
var util = require('util');
var fs = require('fs');

var config = {};

config.onerror = function (msg) {
    if (msg.indexOf('[ERROR]') < 0) {
        msg = '[ERROR]' + msg;
    }
    util.error(msg);
};

config.onsuccess = function (msg) {
    var configStr = [];

    for (var key in config) {
        if (config.hasOwnProperty(key) 
                && Object.prototype.toString.call(config[key]) != '[object Function]'
        ) {
            value = config[key];
            if (typeof value === 'object') {
                value  = JSON.stringify(value);
            }
            configStr.push(key + ':' + value);
        }
    }
    util.puts('Finish', '-------', configStr.join('\n'));
};

config.onmessage = function (msg) {
    util.puts(msg);
};

function loadConfigFile(file) {
    var data = fs.readFileSync(file, 'utf8');
    try {
        data = JSON.parse(data);
    }
    catch (e) {
        data = {};
        util.error('parse ' + file + ' fail..');
    }

    for (var key in data) {
        if (data.hasOwnProperty(key)) {
            config[key] = data[key];
        }
    }
}


var options = process.argv[2];
if (options == '-o') {
    options = process.argv.slice(3);
    options.forEach(function (item, index) {
        if (item.indexOf('=') > 0) {
            item = item.split('=');
            var key = item[0];
            var value = item[1];
            if (key.indexOf('.') < 0) {
                config[key] = value;
            }
            else {
                key = key.split('.');
                config[key[0]] = config[key[0]] || {};
                item = config[key[0]];
                item[key[1]] = value;
            }
        }
        else if (item.indexOf('.js') > 0) {
            loadConfigFile(item);
        }
    });

    config.optimize = config.optimize == 'true';
}
else {
    config.name = options.replace(/.js$/, '');
}

eso.combine(config);

/* vim: set ft=javascript: */
